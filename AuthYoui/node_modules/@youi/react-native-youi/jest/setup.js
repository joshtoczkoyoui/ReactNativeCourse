'use strict';

import { WebSocket } from 'mock-socket';

global.__DEV__ = true;
global.WebSocket = WebSocket;

// Mock Native Modules
const mockNativeModules = require('react-native/Libraries/BatchedBridge/NativeModules');

mockNativeModules.FontRegistry = {
  add: jest.fn(),
  remove: jest.fn(),
  clear: jest.fn(),
  exists: jest.fn(() => Promise.resolve())
}

mockNativeModules.FocusManager = {
  setFocusRoot: jest.fn(),
  setNextFocus: jest.fn(),
  getTag: jest.fn(),
  setFocusable: jest.fn(),
}

mockNativeModules.FormFactor = {
   formFactor: "default",
   isHandsetFormFactor: false,
   isTabletFormFactor: false,
}

mockNativeModules.FairPlayDrmHandlerModule = {
  addListener: jest.fn(),
  removeListener: jest.fn(),
  requestSPCMessage: jest.fn(),
  provideCKCMessage: jest.fn(),
  notifyFailure: jest.fn(),
}

jest.doMock('react-native/Libraries/BatchedBridge/NativeModules', () => mockNativeModules);

// Mock YiRN JS files
jest.mock('./../js/FocusManager.js', () => {
  return {
    setFocusRoot: jest.fn(),
    setNextFocus: jest.fn(),
    disableFocus: jest.fn(),
    enableFocus: jest.fn(),
    setFocusable: jest.fn(),
    getTag: jest.fn().mockImplementation(function (a) { return 1; })
  }
});

jest.mock('./../js/Input.js', () => {
  return {
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  }
});

jest.mock('./../js/FairPlayDrmHandler.js', () => {
  return {
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    requestSPCMessage: jest.fn(),
    provideCKCMessage: jest.fn(),
    notifyFailure: jest.fn()
  }
});

jest.mock('./../js/DeviceInfo.js', () => {
  return {
    getDeviceId: jest.fn(),
    getAdvertisingId: jest.fn(() => Promise.resolve()),
    getSystemName: jest.fn(),
    getSystemVersion: jest.fn(),
  }
});