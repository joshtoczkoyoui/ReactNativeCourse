import { NativeModules } from 'react-native';

const FormFactorModule = NativeModules.FormFactor;

/**
 * FormFactor exposes information about which form factor the application is currently using.
 * The form factor is used to select which type of asset to load, and may also be used for customizing functionality.
 */
class FormFactor {

  /**
   * Returns whether the current form factor is TV or not.
   *
   * @return {boolean} Returns a boolean signifying if the form factor is TV or not.
   */
  static get isTV(): boolean {
    return FormFactorModule.isTVFormFactor;
  }

  /**
   * Returns whether the current form factor is Handset or not.
   *
   * @return {boolean} Returns a boolean signifying if the form factor is Handset or not.
   */
  static get isHandset(): boolean {
    return FormFactorModule.isHandsetFormFactor;
  }

  /**
   * Returns whether the current form factor is Tablet or not.
   *
   * @return {boolean} Returns a boolean signifying if the form factor is Tablet or not.
   */
  static get isTablet(): boolean {
    return FormFactorModule.isTabletFormFactor;
  }

  /**
   * Returns the current form factor as a string.
   *
   * @return {string} Returns the current form factor as a string. This value may be TV, Handset or Tablet.
   */
  static get formFactor(): string {
    return FormFactorModule.formFactor;
  }

  /**
   * A helper method which will return a value for a given object with key-value pairs where the form factor values (TV, Handset or Tablet) are keys.
   * For example, for an object containing the form factor names as keys mapped to Stylesheet styles, this method will return the style for the current form factor.
   *
   * @return {any} Returns a value from the provided object whose key matches the current form factor. If the form factor is not found within the object, the default value will be returned.
   */
  static select (obj: Object): any {
    if (FormFactorModule.formFactor in obj) {
      return obj[FormFactorModule.formFactor]
    } else {
      return obj.default;
    }
  }
};

export default FormFactor;