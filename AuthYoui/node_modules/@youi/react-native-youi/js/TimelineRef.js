'use strict'

import PropTypes from 'prop-types';
import React from 'react'
import {
  requireNativeComponent,
  UIManager
} from 'react-native'

let _TimelineRef = requireNativeComponent('TimelineRef')

export default class TimelineRef extends React.Component {
static propTypes = {
  /* Native only */
  direction: PropTypes.oneOf(['forward', 'reverse']),
  loop: PropTypes.bool,
  onLoad: PropTypes.func,
  onAborted: PropTypes.func,
  onCompleted: PropTypes.func,
  onPaused: PropTypes.func,
  onPlay: PropTypes.func,
  onStarted: PropTypes.func,
  onCompletedForward: PropTypes.func,
  onPausedForward: PropTypes.func,
  onPlayForward: PropTypes.func,
  onStartedForward: PropTypes.func,
  onCompletedReverse: PropTypes.func,
  onPausedReverse: PropTypes.func,
  onPlayReverse: PropTypes.func,
  onStartedReverse: PropTypes.func,
};

constructor(props) {
    super(props);
  }

  _sendDirectEvent(func, event){
    if (func){
      func(event.nativeEvent);
    }
  }

  _onLoad = (event) => {
    this._timelineId = event.nativeEvent.timeline;
    if (!this.props.onLoad) {
      return;
    }
    this.props.onLoad(this);
  }

  _onAborted = (event) => {
    this._sendDirectEvent(this.props.onAborted, event);
  }

  _onCompleted = (event) => {
    this._sendDirectEvent(this.props.onCompleted, event);
  }

  _onStarted = (event) => {
    this._sendDirectEvent(this.props.onStarted, event);
  }

  _onPaused = (event) => {
    this._sendDirectEvent(this.props.onPaused, event);
  }

  _onPlay = (event) => {
    this._sendDirectEvent(this.props.onPlay, event);
  }

  _onCompletedForward = (event) => {
    this._sendDirectEvent(this.props.onCompletedForward, event);
  }

  _onStartedForward = (event) => {
    this._sendDirectEvent(this.props.onStartedForward, event);
  }

  _onPausedForward = (event) => {
    this._sendDirectEvent(this.props.onPausedForward, event);
  }

  _onPlayForward = (event) => {
    this._sendDirectEvent(this.props.onPlayForward, event);
  }

  _onCompletedReverse = (event) => {
    this._sendDirectEvent(this.props.onCompletedReverse, event);
  }

  _onStartedReverse = (event) => {
    this._sendDirectEvent(this.props.onStartedReverse, event);
  }

  _onPausedReverse = (event) => {
    this._sendDirectEvent(this.props.onPausedReverse, event);
  }

  _onPlayReverse = (event) => {
    this._sendDirectEvent(this.props.onPlayReverse, event);
  }

  play = () => {
    UIManager.dispatchViewManagerCommand(
      this._timelineId,
      UIManager.TimelineRef.Commands.play,
      [],
    );
  }

  pause = () => {
    UIManager.dispatchViewManagerCommand(
      this._timelineId,
      UIManager.TimelineRef.Commands.pause,
      [],
    );
  }

  start = () => {
    UIManager.dispatchViewManagerCommand(
      this._timelineId,
      UIManager.TimelineRef.Commands.start,
      [],
    );
  }

  stop = () => {
    UIManager.dispatchViewManagerCommand(
      this._timelineId,
      UIManager.TimelineRef.Commands.stop,
      [],
    );
  }

  abort = () => {
    UIManager.dispatchViewManagerCommand(
      this._timelineId,
      UIManager.TimelineRef.Commands.abort,
      [],
    );
  }

  seek = (time) => {
    UIManager.dispatchViewManagerCommand(
      this._timelineId,
      UIManager.TimelineRef.Commands.seek,
      [time],
    );
  };

  render() {
    return (
      <_TimelineRef
        {...this.props}
        onLoad={this._onLoad}
        onAborted={this._onAborted}
        onCompleted={this._onCompleted}
        onPaused={this._onPaused}
        onPlay={this._onPlay}
        onStarted={this._onStarted}
        onCompletedForward={this._onCompletedForward}
        onPausedForward={this._onPausedForward}
        onPlayForward={this._onPlayForward}
        onStartedForward={this._onStartedForward}
        onCompletedReverse={this._onCompletedReverse}
        onPausedReverse={this._onPausedReverse}
        onPlayReverse={this._onPlayReverse}
        onStartedReverse={this._onStartedReverse}
      />
    );
  }
}
