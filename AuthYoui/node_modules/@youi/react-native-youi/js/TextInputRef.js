'use strict'

import PropTypes from 'prop-types';
import React, {Component} from 'react'
import {
  requireNativeComponent,
  UIManager,
  findNodeHandle,
  findNumericNodeHandleFiber
} from 'react-native'

import { FocusableRef } from "./private/FocusableRef.js"
import { TimelineHolder } from "./private/TimelineHolder.js"

const TextInputState = require('react-native/lib/TextInputState');
let _TextInputRef = requireNativeComponent('TextInputRef')

class TextInputRef extends React.Component {

  constructor(props) {
    super(props);
  }

  // From React Native's TextInput.js
  componentDidUpdate() {
    // This is necessary in case native updates the text and JS decides
    // that the update should be ignored and we should stick with the value
    // that we have in JS.
    const nativeProps = {};

    if (
      this._lastNativeText !== this.props.value &&
      typeof this.props.value === 'string'
    ) {
      nativeProps.text = this.props.value;
    }

    // Selection is also a controlled prop, if the native value doesn't match
    // JS, update to the JS value.
    const {selection} = this.props;
    if (
      this._lastNativeSelection &&
      selection &&
      (this._lastNativeSelection.start !== selection.start ||
        this._lastNativeSelection.end !== selection.end)
    ) {
      nativeProps.selection = this.props.selection;
    }

    if (Object.keys(nativeProps).length > 0 && this.ref) {
      this.ref.setNativeProps(nativeProps);
    }

    if (this.props.selectionState && selection) {
      this.props.selectionState.update(selection.start, selection.end);
    }
  }

  // From React Native's TextInput.js
  _onChange = (event) => {
    if (this.ref) {
      this.ref.setNativeProps({
        mostRecentEventCount: event.nativeEvent.eventCount,
      });
    }

    const text = event.nativeEvent.text;
    this.props.onChange && this.props.onChange(event);
    this.props.onChangeText && this.props.onChangeText(text);

    if (!this.ref) {
      return;
    }

    this._lastNativeText = text;
    this.forceUpdate();
  }

  // From React Native's TextInput.js
  _onFocus = (event) => {
    // To sync the RN and CYI text input focus we directly set the currentlyFocusedID.
    // This is to avoid calling _onFocus() and requesting focus multiple times.
    TextInputState._currentlyFocusedID = findNodeHandle(this.ref);

    if (this.props.onFocus) {
      this.props.onFocus(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.focus();
    }
  }

  // From React Native's TextInput.js
  _onBlur = (event) => {
    this.blur();
    if (this.props.onBlur) {
      this.props.onBlur(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.blur();
    }
  }

  // From React Native's TextInput.js
  focus(){
    TextInputState.focusTextInput(findNodeHandle(this.ref));
  }

  // From React Native's TextInput.js
  blur(){
    TextInputState.blurTextInput(findNodeHandle(this.ref));
  }

  // From React Native's TextInput.js
  isFocused(){
    return (
      TextInputState.currentlyFocusedField() ===
      findNodeHandle(this.ref)
    );
  }

  /**
   * Requests focus and activates the text field for text entry.
  */
  activate(){
    let tag = findNodeHandle(this);
    UIManager.dispatchViewManagerCommand(
      tag,
      UIManager.TextInputRef.Commands.activate,
      [],
    );
  }

  // From React Native's TextInput.js
  clear(){
    this.ref.setNativeProps({text: ''});
  }

  render() {
    return (
      <_TextInputRef
        ref={(a) => {this.ref = a;}}
        {...this.props}
        onChange={this._onChange}
        onFocus={this._onFocus}
        onBlur={this._onBlur}
      />
    );
  }
}

export default TextInputRef;
