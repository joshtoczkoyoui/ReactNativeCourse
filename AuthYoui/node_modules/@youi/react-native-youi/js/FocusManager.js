import {
  findNodeHandle,
  NativeModules,
  UIManager
} from 'react-native';

const FocusManagerModule = NativeModules.FocusManager;

/**
 * The FocusManager allows for customizing the focus paths between components and for setting up focus roots.
 */
class FocusManager {

  static getTag (refOrTag){
    let tag = ((typeof refOrTag === 'object') && findNodeHandle(refOrTag)) || refOrTag;
    if (!Number.isInteger(tag)) {
      throw "Invalid ref or tag passed to FocusManager: " + tag;
    }
    return tag;
  }

  /**
   * Requests that focus be moved to the component with the given tag.
   * 
   * @param refOrTag The ref or a node handle of the component.
   */
  static focus(refOrTag) {
    const tag = this.getTag(refOrTag);
    UIManager.focus(tag);
  }

  /**
   * Enables the focusability of the component with the given tag.
   * 
   * @note This function is only recommended for use on Vanilla React Native components. For You.i React Native components it is recommended to use the prop "focusable".
   * @param refOrTag The ref or a node handle of the component.
   */
  static enableFocus(refOrTag){
    this.setFocusable(refOrTag, true);
  }

  /**
   * Disables the focusability of the component with the given tag.
   * 
   * @note This function is only recommended for use on Vanilla React Native components. For You.i React Native components it is recommended to use the prop "focusable".
   * @param refOrTag The ref or a node handle of the component.
   */
  static disableFocus(refOrTag){
    this.setFocusable(refOrTag, false);
  }

  /**
   * Sets the focusability of the component with the given tag to the provided value.
   * 
   * @note This function is only recommended for use on Vanilla React Native components. For You.i React Native components it is recommended to use the prop "focusable".
   * @param refOrTag The ref or a node handle of the component.
   * @param focusable The boolean value representing whether the component should be focusable or not.
   */
  static setFocusable(refOrTag, focusable){
    const tag = this.getTag(refOrTag);
    FocusManagerModule.setFocusable(tag, focusable);
  }

  /**
   * Controls whether the component with the given ref/tag is a focus root.
   *
   * @param refOrTag The ref or a node handle of the component.
   * @param isFocusRoot True if the component should be a focus root; false otherwise.
   */
  static setFocusRoot(refOrTag, isFocusRoot) {
    const tag = this.getTag(refOrTag);
    FocusManagerModule.setFocusRoot(tag, isFocusRoot);
  }

  /**
   * Sets the focus path between the two components with the given refs/tags in the given direction.
   *
   * @param fromRefOrTag The ref or a node handle of the component from which the focus path originates.
   * @param toRefOrTag The ref or a node handle of the component at which the focus path terminates.
   * @param focusDirection The direction of the focus path. Valid directions are: "up", "down", "right", "left", "forward" and "reverse".
   */
  static setNextFocus(fromRefOrTag, toRefOrTag, focusDirection) {
    const fromTag = this.getTag(fromRefOrTag);
    const toTag = this.getTag(toRefOrTag);
    FocusManagerModule.setNextFocus(fromTag, toTag, focusDirection);
  }

};

export default FocusManager;
