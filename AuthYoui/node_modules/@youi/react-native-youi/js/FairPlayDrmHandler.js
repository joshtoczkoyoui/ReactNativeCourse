'use strict';

import {
  NativeModules,
  NativeEventEmitter
} from 'react-native';

const FairPlayDrmHandlerModule = NativeModules.FairPlayDrmHandlerModule;

/**
 * List of valid DRM event names.
 */
type DrmEventName = $Enum<{
    DRM_REQUEST_URL_AVAILABLE :string, /* Emitted when the DRM Request URL is available. Parameters include number 'tag', and a string 'drmRequestUrl'. */
    SPC_MESSAGE_AVAILABLE :string, /* Emitted when the SPC Message is available. Parameters include number 'tag', and a string 'spcMessage'. */
}>;

/**
 * Handles DRM setup for encrypted playback. 
 * Users may register to drm events to handle custom behaviour if necessary.
 */
class FairPlayDrmHandler extends NativeEventEmitter{

  constructor() {
    super(FairPlayDrmHandlerModule);
  }

  /**
   * Add an event listener.
   *
   * @param {DrmEventName} type The name of the DRM event to listen to.
   * @param {Function} handler The function to call that will handle the event.
   */
  addEventListener(type: DrmEventName, handler: Function) {
    this.addListener(type, handler);
  }
  
  /**
   * Remove an event listener.
   *
   * @param {DrmEventName} type The name of the DRM event being listened to.
   * @param {Function} handler The function that is called to handle the event.
   */
  removeEventListener(type: DrmEventName, handler: Function ) {
    this.removeListener(type, handler);
  }

  /**
   * Request the SPC message.
   *
   * @param {number} tag The video tag. Return the same tag passed into the DRM_REQUEST_URL_AVAILABLE event.
   * @param {string} applicationIdentifier The FairPlay application identifier.  
   * @param {string} contentIdentifier The FairPlay content identifier.
   */
  requestSPCMessage(tag: number, applicationIdentifier: string, contentIdentifier:string) {
    FairPlayDrmHandlerModule.requestSPCMessage(tag, applicationIdentifier, contentIdentifier);
  }

  /**
   * Provide the CKC message.
   *
   * @param {number} tag The video tag. Return the same tag passed into the SPC_MESSAGE_AVAILABLE event.
   * @param {string} ckcMessage The FairPlay CKC Message.
   */
  provideCKCMessage(tag: number, ckcMessage: string) {
    FairPlayDrmHandlerModule.provideCKCMessage(tag, ckcMessage);
  }

  /**
   * Notify that a failure has occurred.
   * 
   * @param {number} tag The video tag. Return the same tag passed into the FairPlay DRM event being handled.
   */
  notifyFailure(tag: number) {
    FairPlayDrmHandlerModule.notifyFailure(tag);
  }

};

module.exports = FairPlayDrmHandlerModule ? new FairPlayDrmHandler() : null;