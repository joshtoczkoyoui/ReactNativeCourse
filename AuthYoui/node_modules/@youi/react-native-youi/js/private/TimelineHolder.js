'use strict'

import PropTypes from 'prop-types';
import React from 'react'
import {
  requireNativeComponent,
  UIManager
} from 'react-native'

import TimelineRef from './../TimelineRef'

export function TimelineHolder(WrappedComponent){
  const TIMELINE_IN = "In"
  const TIMELINE_OUT = "Out"
  
  return class extends React.Component{
    static propTypes = {
      /* Native only */
      onTimelinesLoaded: PropTypes.func,
    };

    constructor(props) {
      super(props);
      this._onTimelinesLoaded = this._onTimelinesLoaded.bind(this);
      this.numberOfTimelinesLoaded = 0;
      
      this.state = {
        timelineDefinitions: {},
        timelines: {}
      };
    }

    _sendDirectEvent(func, event){
      if (func){
        func(event.nativeEvent);
      }
    }

    _onTimelinesLoaded = (event) => {
      let eventTimelineDefinitions = event.nativeEvent.timelines;
      let finalTimelineDefinitions = {};
      if (this.props.onTimelinesLoaded){
        finalTimelineDefinitions = eventTimelineDefinitions;
      }else{
          let valueArray = Object.values(eventTimelineDefinitions);
          if (valueArray.includes(TIMELINE_IN)){
            let index = valueArray.indexOf(TIMELINE_IN);
            finalTimelineDefinitions[index] = TIMELINE_IN;
          }
          if (valueArray.includes(TIMELINE_OUT)){
            let index = valueArray.indexOf(TIMELINE_OUT);
            finalTimelineDefinitions[index] = TIMELINE_OUT;
          }
      }
      this.setState({
        timelineDefinitions: finalTimelineDefinitions,
        timelines: {}
      });
      this.numberOfTimelinesLoaded = 0;
    }

    render() {
      let timelineRefs = [];
      let _this = this;
      Object.keys(this.state.timelineDefinitions).forEach(function(key) {
          let value = _this.state.timelineDefinitions[key];
          timelineRefs.push(<TimelineRef key={value} name={value} 
          ref={(ref) => {
            _this.state.timelines[value] = ref;
          }} 
          onLoad={(ref) => {
            _this.numberOfTimelinesLoaded++;
            /* We should only call onTimelinesLoaded once all of the timelines have loaded.  */
            if (_this.props.onTimelinesLoaded && _this.numberOfTimelinesLoaded === Object.keys(_this.state.timelineDefinitions).length){
              _this.props.onTimelinesLoaded(_this.state.timelines);
            }
          }}
          />);                
      });  

      return (
        <WrappedComponent
          {...this.props}
          onTimelinesLoaded={this._onTimelinesLoaded}
        >
          { timelineRefs } 
          {this.props.children}
        </WrappedComponent>
      );
    }
  }
}
