/*
MIT License

Copyright (c) 2016 Brent Vatne, Baris Sencan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Original Source Code Repo: https://github.com/react-native-community/react-native-video
Modified by You.i TV
*/

import PropTypes from 'prop-types';
import React from 'react'
import {
  findNodeHandle,
  Image,
  NativeModules,
  requireNativeComponent,
  StyleSheet,
  UIManager,
  View,
  ViewPropTypes} from 'react-native'
import resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';  

const VideoModule = NativeModules.VideoModule;

export function VideoHolder(WrappedComponent){
  const closedCaptionsOffId = 4294967295

  const styles = StyleSheet.create({
    base: {
      overflow: 'hidden',
    },
  });
 
  return class extends React.Component{

    constructor(props) {
      super(props);
    }

    getStatistics = (): Promise<any> => {
      return VideoModule.getStatistics(this.reactTag);
    };

    getPlayerInformation = (): Promise<any> => {
      return VideoModule.getPlayerInformation(this.reactTag);
    };

    seek = (time) => {
      VideoModule.seek(this.reactTag, time);
    }

    play = () => {
      VideoModule.play(this.reactTag);
    }

    pause = () => {
      VideoModule.pause(this.reactTag);
    }

    _assignRoot = (component) => {
      this._root = component;
      this.reactTag = findNodeHandle(component);
    };

    static getAudioTrackId(audioTrackIds, selectedAudioTrack)
    {
      if (selectedAudioTrack < 0 || audioTrackIds.length <= selectedAudioTrack) {
        return 0;
      }
      else {
        return audioTrackIds[selectedAudioTrack];
      }
    }

    static getClosedCaptionsOffId() {
      return closedCaptionsOffId;
    }

    static getClosedCaptionsTrackId(closedCaptionsTrackIds, selectedClosedCaptionsTrack)
    {
      if (selectedClosedCaptionsTrack < 0 || closedCaptionsTrackIds.length <= selectedClosedCaptionsTrack) {
        return closedCaptionsOffId;
      }
      else {
        return closedCaptionsTrackIds[selectedClosedCaptionsTrack];
      }
    }

    render() {
      const source = resolveAssetSource(this.props.source) || {};

      let uri = source.uri || '';
      if (uri && uri.match(/^\//)) {
        uri = `res://${uri}`;
      }

      const isNetwork = !!(uri && uri.match(/^https?:/));
      const isAsset = !!(uri && uri.match(/^(assets-library|file|content|ms-appx|ms-appdata|res):/));

      const nativeProps = Object.assign({}, this.props);
      Object.assign(nativeProps, {
        style: [styles.base, nativeProps.style],
        src: {
          uri,
          isNetwork,
          isAsset,
          type: source.type || '',
          mainVer: source.mainVer || 0,
          patchVer: source.patchVer || 0,
          drmScheme: source.drmScheme,
          drmInfo: source.drmInfo,  
        }
      });

      return (
        <WrappedComponent
        {...nativeProps}
        ref={this._assignRoot}
        >
        {this.props.children}
        </WrappedComponent>
      );
    }
  }

  WrappedComponent.propTypes = {
    /* Native only */
    src: PropTypes.object,
    muted: PropTypes.bool,
    selectedAudioTrack: PropTypes.number,
    selectedClosedCaptionsTrack: PropTypes.number,

    userAgent: PropTypes.string,
    maxBitrate: PropTypes.number,
    getStatistics: PropTypes.bool,
    getPlayerInformation: PropTypes.bool,
    metadata: PropTypes.object,

    /* Wrapper component */
    source: PropTypes.oneOfType([
      PropTypes.shape({
        uri: PropTypes.string,
        drmScheme: PropTypes.string,
        drmInfo: PropTypes.any
      }),
      // Opaque type returned by require('./video.mp4')
      PropTypes.number
    ]),

    onBufferingStarted: PropTypes.func,
    onBufferingEnded: PropTypes.func,
    onErrorOccurred: PropTypes.func,
    onPreparing: PropTypes.func,
    onReady: PropTypes.func,
    onPlaying: PropTypes.func,
    onPaused: PropTypes.func,
    onPlaybackComplete: PropTypes.func,
    onFinalized: PropTypes.func,
    onCurrentTimeUpdated: PropTypes.func,
    onDurationChanged: PropTypes.func,
    onStateChanged: PropTypes.func,
    onAvailableAudioTracksChanged: PropTypes.func,
    onAvailableClosedCaptionsTracksChanged: PropTypes.func,

    /* Required by react-native */
    scaleX: PropTypes.number,
    scaleY: PropTypes.number,
    translateX: PropTypes.number,
    translateY: PropTypes.number,
    rotation: PropTypes.number,
    ...ViewPropTypes,
  };

}

